#include <vsg/io/ReaderWriter_vsg.h>
static auto text_frag = []() {std::istringstream str(
"#vsga 0.0.2\n\
Root id=1 vsg::ShaderStage\n\
{\n\
  NumUserObjects 0\n\
  Stage 16\n\
  EntryPoint \"main\"\n\
  ShaderModule id=2 vsg::ShaderModule\n\
  {\n\
    NumUserObjects 0\n\
    Source \"#version 450\n\
\n\
layout(binding = 0) uniform sampler2D texSampler;\n\
\n\
layout(location = 0) in vec4 fragColor;\n\
layout(location = 1) in vec4 outlineColor;\n\
layout(location = 2) in float outlineWidth;\n\
layout(location = 3) in vec2 fragTexCoord;\n\
\n\
layout(location = 0) out vec4 outColor;\n\
\n\
vec2 glyph_alpha(vec2 texcoord, vec2 dx, vec2 dy)\n\
{\n\
    float scale = 1.0;\n\
    float distance_from_edge = (textureGrad(texSampler, texcoord, dx, dy).r - 0.5);\n\
\n\
    float d_distance_dx = dFdx(distance_from_edge) * scale;\n\
    float d_distance_dy = dFdy(distance_from_edge) * scale;\n\
\n\
    float delta = sqrt(d_distance_dx * d_distance_dx + d_distance_dy * d_distance_dy);\n\
\n\
    float min_distance_from_edge = distance_from_edge - delta;\n\
    float max_distance_from_edge = distance_from_edge + delta;\n\
\n\
    //min_distance_from_edge += 0.0;\n\
    float inner_alpha = 0.0;\n\
    if (min_distance_from_edge >= 0.0) inner_alpha = 1.0;\n\
    else if (max_distance_from_edge >= 0.0) inner_alpha = max_distance_from_edge/(max_distance_from_edge-min_distance_from_edge);\n\
\n\
    min_distance_from_edge += outlineWidth;\n\
    float outer_alpha = 0.0;\n\
    if (min_distance_from_edge >= 0.0) outer_alpha = 1.0;\n\
    else if (max_distance_from_edge >= 0.0) outer_alpha = max_distance_from_edge/(max_distance_from_edge-min_distance_from_edge);\n\
\n\
    return vec2(inner_alpha, outer_alpha);\n\
}\n\
\n\
vec2 sampled_glyph_alpha_grid(vec2 texcoord)\n\
{\n\
    float lod = textureQueryLod(texSampler, texcoord).x;\n\
    vec2 dx = dFdx(texcoord);\n\
    vec2 dy = dFdy(texcoord);\n\
\n\
    if (lod<=0.0) return glyph_alpha(texcoord, dx, dy);\n\
\n\
    float area = length(dx) * length(dy);\n\
    float average_side = sqrt(area) / (1.0 +lod);\n\
    float num_x = ceil(length(dx) / average_side);\n\
    float num_y = ceil(length(dy) / average_side);\n\
\n\
    vec2 interval_dx = dx / num_x;\n\
    vec2 interval_dy = dy / num_y;\n\
\n\
    vec2 total_alpha = vec2(0.0, 0.0);\n\
    vec2 tc_row_start = texcoord - dx*0.5 - dy*0.5;\n\
    for(float r = 0; r<num_y; ++r)\n\
    {\n\
        vec2 tc = tc_row_start;\n\
        tc_row_start = tc_row_start + interval_dy;\n\
\n\
        for(float r = 0; r<num_x; ++r)\n\
        {\n\
            total_alpha = total_alpha + glyph_alpha(tc, interval_dx, interval_dy);\n\
\n\
            tc = tc + interval_dx;\n\
        }\n\
    }\n\
\n\
    return total_alpha / (num_x * num_y);\n\
}\n\
\n\
void main()\n\
{\n\
\n\
    vec2 alphas = sampled_glyph_alpha_grid(fragTexCoord);\n\
\n\
    if (alphas[1]>0.0)\n\
    {\n\
        vec4 glyph = vec4(fragColor.rgb, fragColor.a * alphas[0]);\n\
        vec4 outline = vec4(outlineColor.rgb, outlineColor.a * alphas[1]);\n\
        outColor = mix(outline, glyph, glyph.a);\n\
    }\n\
    else\n\
    {\n\
        outColor = vec4(fragColor.rgb,  fragColor.a * alphas[0]);\n\
    }\n\
\n\
    //outColor = fragColor;\n\
    if (outColor.a == 0.0) discard;\n\
}\n\
\"\n\
    SPIRVSize 1718\n\
    SPIRV 119734787 65536 524298 290 0 131089 1 131089 50 393227 1 1280527431\n\
     1685353262 808793134 0 196622 0 1 655375 4 4 1852399981 0 83\n\
     223 236 251 264 196624 4 7 196611 2 450 262149 4\n\
     1852399981 0 589829 13 1887005799 1818320744 677472368 993158774 993158774 993158774 0 327685\n\
     10 1668834676 1685221231 0 196613 11 30820 196613 12 31076 655365 17\n\
     1886216563 1600415084 1887005799 1818320744 1600219248 1684632167 845575720 59 327685 16 1668834676 1685221231\n\
     0 262149 20 1818321779 101 458757 22 1953720676 1701015137 1869768287 1684365165 25959\n\
     327685 26 1400399220 1819307361 29285 393221 38 1768185700 1851880563 1683973475 120 393221\n\
     43 1768185700 1851880563 1683973475 121 262149 48 1953260900 97 524293 57 1601071469\n\
     1953720676 1701015137 1869768287 1684365165 25959 524293 61 1601724781 1953720676 1701015137 1869768287 1684365165\n\
     25959 327685 65 1701736041 1818320754 6383728 393221 83 1819571567 1466265193 1752458345 0\n\
     327685 87 1702131055 1818320754 6383728 196613 107 6582124 196613 112 30820 196613\n\
     115 31076 262149 122 1634886000 109 262149 124 1634886000 109 262149 126\n\
     1634886000 109 262149 130 1634038369 0 393221 136 1919252065 1600481121 1701079411 0\n\
     262149 142 1601009006 120 262149 148 1601009006 121 327685 154 1702129257 1818326642\n\
     7890015 327685 159 1702129257 1818326642 7955551 327685 164 1635020660 1818320748 6383728 393221\n\
     166 1918854004 1935636335 1953653108 0 196613 174 114 196613 183 25460 196613\n\
     188 114 262149 198 1634886000 109 262149 200 1634886000 109 262149 202\n\
     1634886000 109 262149 221 1752198241 29537 393221 223 1734439526 1131963732 1685221231 0\n\
     262149 224 1634886000 109 262149 234 1887005799 104 327685 236 1734439526 1869377347\n\
     114 262149 250 1819571567 6647401 393221 251 1819571567 1130720873 1919904879 0 327685\n\
     264 1131705711 1919904879 0 262215 26 34 0 262215 26 33 0\n\
     262215 83 30 2 262215 223 30 3 262215 236 30 0\n\
     262215 251 30 1 262215 264 30 0 131091 2 196641 3\n\
     2 196630 6 32 262167 7 6 2 262176 8 7 7\n\
     393249 9 7 8 8 8 262177 15 7 8 262176 19\n\
     7 6 262187 6 21 1065353216 589849 23 6 1 0 0\n\
     0 1 0 196635 24 23 262176 25 0 24 262203 25\n\
     26 0 262167 31 6 4 262165 33 32 0 262187 33\n\
     34 0 262187 6 36 1056964608 262187 6 66 0 131092 68\n\
     262176 82 1 6 262203 82 83 1 327724 7 165 66\n\
     66 262176 222 1 7 262203 222 223 1 262187 33 227\n\
     1 262176 233 7 31 262176 235 1 31 262203 235 236\n\
     1 262167 237 6 3 262187 33 240 3 262203 235 251\n\
     1 262176 263 3 31 262203 263 264 3 262176 283 3\n\
     6 327734 2 4 0 3 131320 5 262203 8 221 7\n\
     262203 8 224 7 262203 233 234 7 262203 233 250 7\n\
     262205 7 225 223 196670 224 225 327737 7 226 17 224\n\
     196670 221 226 327745 19 228 221 227 262205 6 229 228\n\
     327866 68 230 229 66 196855 232 0 262394 230 231 271\n\
     131320 231 262205 31 238 236 524367 237 239 238 238 0\n\
     1 2 327745 82 241 236 240 262205 6 242 241 327745\n\
     19 243 221 34 262205 6 244 243 327813 6 245 242\n\
     244 327761 6 246 239 0 327761 6 247 239 1 327761\n\
     6 248 239 2 458832 31 249 246 247 248 245 196670\n\
     234 249 262205 31 252 251 524367 237 253 252 252 0\n\
     1 2 327745 82 254 251 240 262205 6 255 254 327745\n\
     19 256 221 227 262205 6 257 256 327813 6 258 255\n\
     257 327761 6 259 253 0 327761 6 260 253 1 327761\n\
     6 261 253 2 458832 31 262 259 260 261 258 196670\n\
     250 262 262205 31 265 250 262205 31 266 234 327745 19\n\
     267 234 240 262205 6 268 267 458832 31 269 268 268\n\
     268 268 524300 31 270 1 46 265 266 269 196670 264\n\
     270 131321 232 131320 271 262205 31 272 236 524367 237 273\n\
     272 272 0 1 2 327745 82 274 236 240 262205 6\n\
     275 274 327745 19 276 221 34 262205 6 277 276 327813\n\
     6 278 275 277 327761 6 279 273 0 327761 6 280\n\
     273 1 327761 6 281 273 2 458832 31 282 279 280\n\
     281 278 196670 264 282 131321 232 131320 232 327745 283 284\n\
     264 240 262205 6 285 284 327860 68 286 285 66 196855\n\
     288 0 262394 286 287 288 131320 287 65788 131320 288 65789\n\
     65592 327734 7 13 0 9 196663 8 10 196663 8 11\n\
     196663 8 12 131320 14 262203 19 20 7 262203 19 22\n\
     7 262203 19 38 7 262203 19 43 7 262203 19 48\n\
     7 262203 19 57 7 262203 19 61 7 262203 19 65\n\
     7 262203 19 87 7 196670 20 21 262205 24 27 26\n\
     262205 7 28 10 262205 7 29 11 262205 7 30 12\n\
     524376 31 32 27 28 4 29 30 327761 6 35 32\n\
     0 327811 6 37 35 36 196670 22 37 262205 6 39\n\
     22 262351 6 40 39 262205 6 41 20 327813 6 42\n\
     40 41 196670 38 42 262205 6 44 22 262352 6 45\n\
     44 262205 6 46 20 327813 6 47 45 46 196670 43\n\
     47 262205 6 49 38 262205 6 50 38 327813 6 51\n\
     49 50 262205 6 52 43 262205 6 53 43 327813 6\n\
     54 52 53 327809 6 55 51 54 393228 6 56 1\n\
     31 55 196670 48 56 262205 6 58 22 262205 6 59\n\
     48 327811 6 60 58 59 196670 57 60 262205 6 62\n\
     22 262205 6 63 48 327809 6 64 62 63 196670 61\n\
     64 196670 65 66 262205 6 67 57 327870 68 69 67\n\
     66 196855 71 0 262394 69 70 72 131320 70 196670 65\n\
     21 131321 71 131320 72 262205 6 73 61 327870 68 74\n\
     73 66 196855 76 0 262394 74 75 76 131320 75 262205\n\
     6 77 61 262205 6 78 61 262205 6 79 57 327811\n\
     6 80 78 79 327816 6 81 77 80 196670 65 81\n\
     131321 76 131320 76 131321 71 131320 71 262205 6 84 83\n\
     262205 6 85 57 327809 6 86 85 84 196670 57 86\n\
     196670 87 66 262205 6 88 57 327870 68 89 88 66\n\
     196855 91 0 262394 89 90 92 131320 90 196670 87 21\n\
     131321 91 131320 92 262205 6 93 61 327870 68 94 93\n\
     66 196855 96 0 262394 94 95 96 131320 95 262205 6\n\
     97 61 262205 6 98 61 262205 6 99 57 327811 6\n\
     100 98 99 327816 6 101 97 100 196670 87 101 131321\n\
     96 131320 96 131321 91 131320 91 262205 6 102 65 262205\n\
     6 103 87 327760 7 104 102 103 131326 104 65592 327734\n\
     7 17 0 15 196663 8 16 131320 18 262203 19 107\n\
     7 262203 8 112 7 262203 8 115 7 262203 8 122\n\
     7 262203 8 124 7 262203 8 126 7 262203 19 130\n\
     7 262203 19 136 7 262203 19 142 7 262203 19 148\n\
     7 262203 8 154 7 262203 8 159 7 262203 8 164\n\
     7 262203 8 166 7 262203 19 174 7 262203 8 183\n\
     7 262203 19 188 7 262203 8 198 7 262203 8 200\n\
     7 262203 8 202 7 262205 24 108 26 262205 7 109\n\
     16 327785 7 110 108 109 327761 6 111 110 0 196670\n\
     107 111 262205 7 113 16 262351 7 114 113 196670 112\n\
     114 262205 7 116 16 262352 7 117 116 196670 115 117\n\
     262205 6 118 107 327868 68 119 118 66 196855 121 0\n\
     262394 119 120 121 131320 120 262205 7 123 16 196670 122\n\
     123 262205 7 125 112 196670 124 125 262205 7 127 115\n\
     196670 126 127 458809 7 128 13 122 124 126 131326 128\n\
     131320 121 262205 7 131 112 393228 6 132 1 66 131\n\
     262205 7 133 115 393228 6 134 1 66 133 327813 6\n\
     135 132 134 196670 130 135 262205 6 137 130 393228 6\n\
     138 1 31 137 262205 6 139 107 327809 6 140 21\n\
     139 327816 6 141 138 140 196670 136 141 262205 7 143\n\
     112 393228 6 144 1 66 143 262205 6 145 136 327816\n\
     6 146 144 145 393228 6 147 1 9 146 196670 142\n\
     147 262205 7 149 115 393228 6 150 1 66 149 262205\n\
     6 151 136 327816 6 152 150 151 393228 6 153 1\n\
     9 152 196670 148 153 262205 7 155 112 262205 6 156\n\
     142 327760 7 157 156 156 327816 7 158 155 157 196670\n\
     154 158 262205 7 160 115 262205 6 161 148 327760 7\n\
     162 161 161 327816 7 163 160 162 196670 159 163 196670\n\
     164 165 262205 7 167 16 262205 7 168 112 327822 7\n\
     169 168 36 327811 7 170 167 169 262205 7 171 115\n\
     327822 7 172 171 36 327811 7 173 170 172 196670 166\n\
     173 196670 174 66 131321 175 131320 175 262390 177 178 0\n\
     131321 179 131320 179 262205 6 180 174 262205 6 181 148\n\
     327864 68 182 180 181 262394 182 176 177 131320 176 262205\n\
     7 184 166 196670 183 184 262205 7 185 166 262205 7\n\
     186 159 327809 7 187 185 186 196670 166 187 196670 188\n\
     66 131321 189 131320 189 262390 191 192 0 131321 193 131320\n\
     193 262205 6 194 188 262205 6 195 142 327864 68 196\n\
     194 195 262394 196 190 191 131320 190 262205 7 197 164\n\
     262205 7 199 183 196670 198 199 262205 7 201 154 196670\n\
     200 201 262205 7 203 159 196670 202 203 458809 7 204\n\
     13 198 200 202 327809 7 205 197 204 196670 164 205\n\
     262205 7 206 183 262205 7 207 154 327809 7 208 206\n\
     207 196670 183 208 131321 192 131320 192 262205 6 209 188\n\
     327809 6 210 209 21 196670 188 210 131321 189 131320 191\n\
     131321 178 131320 178 262205 6 211 174 327809 6 212 211\n\
     21 196670 174 212 131321 175 131320 177 262205 7 213 164\n\
     262205 6 214 142 262205 6 215 148 327813 6 216 214\n\
     215 327760 7 217 216 216 327816 7 218 213 217 131326\n\
     218 65592\n\
  }\n\
  NumSpecializationConstants 0\n\
}\n\
");
vsg::ReaderWriter_vsg io;
return io.read_cast<vsg::ShaderStage>(str);
};
