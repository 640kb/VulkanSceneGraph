#include <vsg/io/ReaderWriter_vsg.h>
static auto text_frag = []() {std::istringstream str(
"#vsga 0.0.2\n\
Root id=1 vsg::ShaderStage\n\
{\n\
  NumUserObjects 0\n\
  Stage 16\n\
  EntryPoint \"main\"\n\
  ShaderModule id=2 vsg::ShaderModule\n\
  {\n\
    NumUserObjects 0\n\
    Source \"#version 450\n\
\n\
layout(binding = 0) uniform sampler2D texSampler;\n\
\n\
layout(location = 0) in vec4 fragColor;\n\
layout(location = 1) in vec4 outlineColor;\n\
layout(location = 2) in float outlineWidth;\n\
layout(location = 3) in vec2 fragTexCoord;\n\
\n\
layout(location = 0) out vec4 outColor;\n\
\n\
vec2 glyph_alpha(vec2 texcoord, vec2 dx, vec2 dy)\n\
{\n\
    float lod = textureQueryLod(texSampler, texcoord).x;\n\
    float innerCutOff = 0.0;\n\
    if (lod>0.0) innerCutOff = lod * 0.03;\n\
\n\
    float scale = 1.0;\n\
    float distance_from_edge = (textureGrad(texSampler, texcoord, dx, dy).r - 0.5);\n\
\n\
    float d_distance_dx = dFdx(distance_from_edge) * scale;\n\
    float d_distance_dy = dFdy(distance_from_edge) * scale;\n\
\n\
    float delta = sqrt(d_distance_dx * d_distance_dx + d_distance_dy * d_distance_dy);\n\
\n\
    float min_distance_from_edge = distance_from_edge - delta;\n\
    float max_distance_from_edge = distance_from_edge + delta;\n\
\n\
    //min_distance_from_edge += 0.0;\n\
    min_distance_from_edge += innerCutOff;\n\
    float inner_alpha = 0.0;\n\
    if (min_distance_from_edge >= 0.0) inner_alpha = 1.0;\n\
    else if (max_distance_from_edge >= 0.0) inner_alpha = max_distance_from_edge/(max_distance_from_edge-min_distance_from_edge);\n\
\n\
    min_distance_from_edge += outlineWidth;\n\
    float outer_alpha = 0.0;\n\
    if (min_distance_from_edge >= 0.0) outer_alpha = 1.0;\n\
    else if (max_distance_from_edge >= 0.0) outer_alpha = max_distance_from_edge/(max_distance_from_edge-min_distance_from_edge);\n\
\n\
    return vec2(inner_alpha, outer_alpha);\n\
}\n\
\n\
vec2 sampled_glyph_alpha_grid(vec2 texcoord)\n\
{\n\
    float lod = textureQueryLod(texSampler, texcoord).x;\n\
    vec2 dx = dFdx(texcoord);\n\
    vec2 dy = dFdy(texcoord);\n\
\n\
    if (lod<=0.0) return glyph_alpha(texcoord, dx, dy);\n\
\n\
    float area = length(dx) * length(dy);\n\
    float average_side = sqrt(area) / (1.0 + lod);\n\
    float num_x = ceil(length(dx) / average_side);\n\
    float num_y = ceil(length(dy) / average_side);\n\
\n\
    vec2 interval_dx = dx / num_x;\n\
    vec2 interval_dy = dy / num_y;\n\
\n\
    vec2 total_alpha = vec2(0.0, 0.0);\n\
    vec2 tc_row_start = texcoord - dx*0.5 - dy*0.5;\n\
    for(float r = 0; r<num_y; ++r)\n\
    {\n\
        vec2 tc = tc_row_start;\n\
        tc_row_start = tc_row_start + interval_dy;\n\
\n\
        for(float c = 0; c<num_x; ++c)\n\
        {\n\
            total_alpha = total_alpha + glyph_alpha(tc, interval_dx, interval_dy);\n\
\n\
            tc = tc + interval_dx;\n\
        }\n\
    }\n\
\n\
    return total_alpha / (num_x * num_y);\n\
}\n\
\n\
void main()\n\
{\n\
    vec2 alphas = sampled_glyph_alpha_grid(fragTexCoord);\n\
\n\
    if (alphas[1]>0.0)\n\
    {\n\
        vec4 glyph = vec4(fragColor.rgb, fragColor.a * alphas[0]);\n\
        vec4 outline = vec4(outlineColor.rgb, outlineColor.a * alphas[1]);\n\
        outColor = mix(outline, glyph, glyph.a);\n\
    }\n\
    else\n\
    {\n\
        outColor = vec4(fragColor.rgb,  fragColor.a * alphas[0]);\n\
    }\n\
\n\
    if (outColor.a == 0.0) discard;\n\
}\n\
\"\n\
    SPIRVSize 1812\n\
    SPIRV 119734787 65536 524298 306 0 131089 1 131089 50 393227 1 1280527431\n\
     1685353262 808793134 0 196622 0 1 655375 4 4 1852399981 0 99\n\
     239 252 267 280 196624 4 7 196611 2 450 262149 4\n\
     1852399981 0 589829 13 1887005799 1818320744 677472368 993158774 993158774 993158774 0 327685\n\
     10 1668834676 1685221231 0 196613 11 30820 196613 12 31076 655365 17\n\
     1886216563 1600415084 1887005799 1818320744 1600219248 1684632167 845575720 59 327685 16 1668834676 1685221231\n\
     0 196613 20 6582124 327685 24 1400399220 1819307361 29285 327685 31 1701736041\n\
     1953842034 6710863 262149 41 1818321779 101 458757 43 1953720676 1701015137 1869768287 1684365165\n\
     25959 393221 53 1768185700 1851880563 1683973475 120 393221 58 1768185700 1851880563 1683973475\n\
     121 262149 63 1953260900 97 524293 72 1601071469 1953720676 1701015137 1869768287 1684365165\n\
     25959 524293 76 1601724781 1953720676 1701015137 1869768287 1684365165 25959 327685 83 1701736041\n\
     1818320754 6383728 393221 99 1819571567 1466265193 1752458345 0 327685 103 1702131055 1818320754\n\
     6383728 196613 123 6582124 196613 128 30820 196613 131 31076 262149 138\n\
     1634886000 109 262149 140 1634886000 109 262149 142 1634886000 109 262149 146\n\
     1634038369 0 393221 152 1919252065 1600481121 1701079411 0 262149 158 1601009006 120\n\
     262149 164 1601009006 121 327685 170 1702129257 1818326642 7890015 327685 175 1702129257\n\
     1818326642 7955551 327685 180 1635020660 1818320748 6383728 393221 182 1918854004 1935636335 1953653108\n\
     0 196613 190 114 196613 199 25460 196613 204 99 262149 214\n\
     1634886000 109 262149 216 1634886000 109 262149 218 1634886000 109 262149 237\n\
     1752198241 29537 393221 239 1734439526 1131963732 1685221231 0 262149 240 1634886000 109\n\
     262149 250 1887005799 104 327685 252 1734439526 1869377347 114 262149 266 1819571567\n\
     6647401 393221 267 1819571567 1130720873 1919904879 0 327685 280 1131705711 1919904879 0\n\
     262215 24 34 0 262215 24 33 0 262215 99 30 2\n\
     262215 239 30 3 262215 252 30 0 262215 267 30 1\n\
     262215 280 30 0 131091 2 196641 3 2 196630 6 32\n\
     262167 7 6 2 262176 8 7 7 393249 9 7 8\n\
     8 8 262177 15 7 8 262176 19 7 6 589849 21\n\
     6 1 0 0 0 1 0 196635 22 21 262176 23\n\
     0 22 262203 23 24 0 262165 28 32 0 262187 28\n\
     29 0 262187 6 32 0 131092 34 262187 6 39 1022739087\n\
     262187 6 42 1065353216 262167 48 6 4 262187 6 51 1056964608\n\
     262176 98 1 6 262203 98 99 1 327724 7 181 32\n\
     32 262176 238 1 7 262203 238 239 1 262187 28 243\n\
     1 262176 249 7 48 262176 251 1 48 262203 251 252\n\
     1 262167 253 6 3 262187 28 256 3 262203 251 267\n\
     1 262176 279 3 48 262203 279 280 3 262176 299 3\n\
     6 327734 2 4 0 3 131320 5 262203 8 237 7\n\
     262203 8 240 7 262203 249 250 7 262203 249 266 7\n\
     262205 7 241 239 196670 240 241 327737 7 242 17 240\n\
     196670 237 242 327745 19 244 237 243 262205 6 245 244\n\
     327866 34 246 245 32 196855 248 0 262394 246 247 287\n\
     131320 247 262205 48 254 252 524367 253 255 254 254 0\n\
     1 2 327745 98 257 252 256 262205 6 258 257 327745\n\
     19 259 237 29 262205 6 260 259 327813 6 261 258\n\
     260 327761 6 262 255 0 327761 6 263 255 1 327761\n\
     6 264 255 2 458832 48 265 262 263 264 261 196670\n\
     250 265 262205 48 268 267 524367 253 269 268 268 0\n\
     1 2 327745 98 270 267 256 262205 6 271 270 327745\n\
     19 272 237 243 262205 6 273 272 327813 6 274 271\n\
     273 327761 6 275 269 0 327761 6 276 269 1 327761\n\
     6 277 269 2 458832 48 278 275 276 277 274 196670\n\
     266 278 262205 48 281 266 262205 48 282 250 327745 19\n\
     283 250 256 262205 6 284 283 458832 48 285 284 284\n\
     284 284 524300 48 286 1 46 281 282 285 196670 280\n\
     286 131321 248 131320 287 262205 48 288 252 524367 253 289\n\
     288 288 0 1 2 327745 98 290 252 256 262205 6\n\
     291 290 327745 19 292 237 29 262205 6 293 292 327813\n\
     6 294 291 293 327761 6 295 289 0 327761 6 296\n\
     289 1 327761 6 297 289 2 458832 48 298 295 296\n\
     297 294 196670 280 298 131321 248 131320 248 327745 299 300\n\
     280 256 262205 6 301 300 327860 34 302 301 32 196855\n\
     304 0 262394 302 303 304 131320 303 65788 131320 304 65789\n\
     65592 327734 7 13 0 9 196663 8 10 196663 8 11\n\
     196663 8 12 131320 14 262203 19 20 7 262203 19 31\n\
     7 262203 19 41 7 262203 19 43 7 262203 19 53\n\
     7 262203 19 58 7 262203 19 63 7 262203 19 72\n\
     7 262203 19 76 7 262203 19 83 7 262203 19 103\n\
     7 262205 22 25 24 262205 7 26 10 327785 7 27\n\
     25 26 327761 6 30 27 0 196670 20 30 196670 31\n\
     32 262205 6 33 20 327866 34 35 33 32 196855 37\n\
     0 262394 35 36 37 131320 36 262205 6 38 20 327813\n\
     6 40 38 39 196670 31 40 131321 37 131320 37 196670\n\
     41 42 262205 22 44 24 262205 7 45 10 262205 7\n\
     46 11 262205 7 47 12 524376 48 49 44 45 4\n\
     46 47 327761 6 50 49 0 327811 6 52 50 51\n\
     196670 43 52 262205 6 54 43 262351 6 55 54 262205\n\
     6 56 41 327813 6 57 55 56 196670 53 57 262205\n\
     6 59 43 262352 6 60 59 262205 6 61 41 327813\n\
     6 62 60 61 196670 58 62 262205 6 64 53 262205\n\
     6 65 53 327813 6 66 64 65 262205 6 67 58\n\
     262205 6 68 58 327813 6 69 67 68 327809 6 70\n\
     66 69 393228 6 71 1 31 70 196670 63 71 262205\n\
     6 73 43 262205 6 74 63 327811 6 75 73 74\n\
     196670 72 75 262205 6 77 43 262205 6 78 63 327809\n\
     6 79 77 78 196670 76 79 262205 6 80 31 262205\n\
     6 81 72 327809 6 82 81 80 196670 72 82 196670\n\
     83 32 262205 6 84 72 327870 34 85 84 32 196855\n\
     87 0 262394 85 86 88 131320 86 196670 83 42 131321\n\
     87 131320 88 262205 6 89 76 327870 34 90 89 32\n\
     196855 92 0 262394 90 91 92 131320 91 262205 6 93\n\
     76 262205 6 94 76 262205 6 95 72 327811 6 96\n\
     94 95 327816 6 97 93 96 196670 83 97 131321 92\n\
     131320 92 131321 87 131320 87 262205 6 100 99 262205 6\n\
     101 72 327809 6 102 101 100 196670 72 102 196670 103\n\
     32 262205 6 104 72 327870 34 105 104 32 196855 107\n\
     0 262394 105 106 108 131320 106 196670 103 42 131321 107\n\
     131320 108 262205 6 109 76 327870 34 110 109 32 196855\n\
     112 0 262394 110 111 112 131320 111 262205 6 113 76\n\
     262205 6 114 76 262205 6 115 72 327811 6 116 114\n\
     115 327816 6 117 113 116 196670 103 117 131321 112 131320\n\
     112 131321 107 131320 107 262205 6 118 83 262205 6 119\n\
     103 327760 7 120 118 119 131326 120 65592 327734 7 17\n\
     0 15 196663 8 16 131320 18 262203 19 123 7 262203\n\
     8 128 7 262203 8 131 7 262203 8 138 7 262203\n\
     8 140 7 262203 8 142 7 262203 19 146 7 262203\n\
     19 152 7 262203 19 158 7 262203 19 164 7 262203\n\
     8 170 7 262203 8 175 7 262203 8 180 7 262203\n\
     8 182 7 262203 19 190 7 262203 8 199 7 262203\n\
     19 204 7 262203 8 214 7 262203 8 216 7 262203\n\
     8 218 7 262205 22 124 24 262205 7 125 16 327785\n\
     7 126 124 125 327761 6 127 126 0 196670 123 127\n\
     262205 7 129 16 262351 7 130 129 196670 128 130 262205\n\
     7 132 16 262352 7 133 132 196670 131 133 262205 6\n\
     134 123 327868 34 135 134 32 196855 137 0 262394 135\n\
     136 137 131320 136 262205 7 139 16 196670 138 139 262205\n\
     7 141 128 196670 140 141 262205 7 143 131 196670 142\n\
     143 458809 7 144 13 138 140 142 131326 144 131320 137\n\
     262205 7 147 128 393228 6 148 1 66 147 262205 7\n\
     149 131 393228 6 150 1 66 149 327813 6 151 148\n\
     150 196670 146 151 262205 6 153 146 393228 6 154 1\n\
     31 153 262205 6 155 123 327809 6 156 42 155 327816\n\
     6 157 154 156 196670 152 157 262205 7 159 128 393228\n\
     6 160 1 66 159 262205 6 161 152 327816 6 162\n\
     160 161 393228 6 163 1 9 162 196670 158 163 262205\n\
     7 165 131 393228 6 166 1 66 165 262205 6 167\n\
     152 327816 6 168 166 167 393228 6 169 1 9 168\n\
     196670 164 169 262205 7 171 128 262205 6 172 158 327760\n\
     7 173 172 172 327816 7 174 171 173 196670 170 174\n\
     262205 7 176 131 262205 6 177 164 327760 7 178 177\n\
     177 327816 7 179 176 178 196670 175 179 196670 180 181\n\
     262205 7 183 16 262205 7 184 128 327822 7 185 184\n\
     51 327811 7 186 183 185 262205 7 187 131 327822 7\n\
     188 187 51 327811 7 189 186 188 196670 182 189 196670\n\
     190 32 131321 191 131320 191 262390 193 194 0 131321 195\n\
     131320 195 262205 6 196 190 262205 6 197 164 327864 34\n\
     198 196 197 262394 198 192 193 131320 192 262205 7 200\n\
     182 196670 199 200 262205 7 201 182 262205 7 202 175\n\
     327809 7 203 201 202 196670 182 203 196670 204 32 131321\n\
     205 131320 205 262390 207 208 0 131321 209 131320 209 262205\n\
     6 210 204 262205 6 211 158 327864 34 212 210 211\n\
     262394 212 206 207 131320 206 262205 7 213 180 262205 7\n\
     215 199 196670 214 215 262205 7 217 170 196670 216 217\n\
     262205 7 219 175 196670 218 219 458809 7 220 13 214\n\
     216 218 327809 7 221 213 220 196670 180 221 262205 7\n\
     222 199 262205 7 223 170 327809 7 224 222 223 196670\n\
     199 224 131321 208 131320 208 262205 6 225 204 327809 6\n\
     226 225 42 196670 204 226 131321 205 131320 207 131321 194\n\
     131320 194 262205 6 227 190 327809 6 228 227 42 196670\n\
     190 228 131321 191 131320 193 262205 7 229 180 262205 6\n\
     230 158 262205 6 231 164 327813 6 232 230 231 327760\n\
     7 233 232 232 327816 7 234 229 233 131326 234 65592\n\
  }\n\
  NumSpecializationConstants 0\n\
}\n\
");
vsg::ReaderWriter_vsg io;
return io.read_cast<vsg::ShaderStage>(str);
};
