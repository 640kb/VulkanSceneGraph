include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/include
)

# collect all the headers in the source directory
file(GLOB HEADERS ${CMAKE_SOURCE_DIR}/include/vsg/*.h ${CMAKE_SOURCE_DIR}/include/vsg/*/*.h)

# for out of source builds collect all the autogenerated headers in the build directory
if (NOT (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR}))
    file(GLOB AUTOGENERATED_HEADERS ${CMAKE_BINARY_DIR}/include/vsg/*.h ${CMAKE_BINARY_DIR}/include/vsg/*/*.h)
    set(HEADERS ${HEADERS} ${AUTOGENERATED_HEADERS})
endif()

# set up the source files explictly.
set(SOURCES

    core/Allocator.cpp
    core/Auxiliary.cpp
    core/Object.cpp
    core/Result.cpp
    core/Visitor.cpp
    core/ConstVisitor.cpp
    core/Version.cpp

    introspection/c_interface.cpp

    nodes/Group.cpp
    nodes/Node.cpp
    nodes/QuadGroup.cpp
    nodes/StateGroup.cpp

    utils/FileSystem.cpp

    traversals/DispatchTraversal.cpp
    traversals/CullTraversal.cpp

    viewer/GraphicsStage.cpp
    viewer/GLFW_Window.cpp
    viewer/Viewer.cpp
    viewer/Window.cpp

    vk/Buffer.cpp
    vk/BufferData.cpp
    vk/BufferView.cpp
    vk/BindIndexBuffer.cpp
    vk/BindVertexBuffers.cpp
    vk/CommandBuffer.cpp
    vk/CommandPool.cpp
    vk/CommandVisitor.cpp
    vk/ComputePipeline.cpp
    vk/DescriptorPool.cpp
    vk/DescriptorSet.cpp
    vk/DescriptorSetLayout.cpp
    vk/Device.cpp
    vk/DeviceMemory.cpp
    vk/Fence.cpp
    vk/Framebuffer.cpp
    vk/GraphicsPipeline.cpp
    vk/Image.cpp
    vk/ImageView.cpp
    vk/Instance.cpp
    vk/MemoryManager.cpp
    vk/PhysicalDevice.cpp
    vk/Pipeline.cpp
    vk/PipelineLayout.cpp
    vk/PushConstants.cpp
    vk/RenderPass.cpp
    vk/Sampler.cpp
    vk/Semaphore.cpp
    vk/ShaderModule.cpp
    vk/Surface.cpp
    vk/Swapchain.cpp
)

add_definitions(${VSG_DEFINITIONS})

add_library(vsg ${HEADERS} ${SOURCES})

set_property(TARGET vsg PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET vsg PROPERTY VERSION ${VSG_MAJOR_VERSION}.${VSG_MINOR_VERSION}.${VSG_PATCH_VERSION})
set_property(TARGET vsg PROPERTY SOVERSION ${VSG_SOVERSION})

target_link_libraries(vsg Vulkan::Vulkan GLFW::GLFW)

install(TARGETS vsg
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        COMPONENT libvsg
)

install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/vsg DESTINATION include)

if (NOT(${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR}))
    install(DIRECTORY ${CMAKE_BINARY_DIR}/include/vsg DESTINATION include)
endif()
